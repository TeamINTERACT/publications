"""
Author: Kole Phillips

Using the CSV file generated by slope_breakpoint_metric_calcs.py, classify each participant into one of five classes:

Usage: python classify_dist.py
"""

import pandas as pd
import numpy as np
from sys import argv


def classify(df, angle_thresh=0.1, r_thresh=0.9, auc_thresh=0.7, tail_thresh=5):
    """
    Classifies a participant based on their physical activity metrics, as computed by calculate_metrics() in
    slope_breakpoin_metric_calcs
    :param df: A dataframe where each participant's metrics are stored in a single row
    :param angle_thresh: Determines whether a participant is moderately active or consistent. This value is the most
    likely to change between different units, as it is the only differing parameter between MIMS and Actigraph data
    classification
    :param r_thresh: A distribution with a lower r squared value that is not non-vigorous or extremely active is an outlier
    :param auc_thresh: Determines how much the actual AUC must exceed the expected AUC by in order to be classified as
    extremely active
    :param tail_thresh: If the last line segment has fewer than this many data points, the participant is considered to
    be non-vigorous
    :return: The input dataframe with a new column for the classification of that participant: A for moderately active,
    B for consistent, C for non-vigorous, D for extremely active, and E for outlier
    """
    out_df = df
    angle2 = np.arctan2(df['4-seg_slope_2'], 1)
    angle3 = np.arctan2(df['4-seg_slope_3'], 1)
    slope_change = np.abs(angle2 - angle3)
    classes = np.array(['E' for _ in range(0, len(df.index.tolist()))])
    classes[slope_change < angle_thresh] = 'B'
    classes[slope_change >= angle_thresh] = 'A'
    classes[out_df['4-seg_r_square_log'] < r_thresh] = 'E'
    classes[out_df['metric_tail_auc'] / out_df['dist_tail_auc'] < auc_thresh] = 'D'
    classes[out_df['tail_pop'] < tail_thresh] = 'C'
    out_df['class'] = classes
    for col in out_df.columns:
        if '4-seg' in col:
            true_col = col.replace('4-seg_', '')
            three_col = col.replace('4-seg', '3-seg')
            out_df[true_col] = out_df[col]
            if three_col not in out_df.columns:
                out_df.loc[out_df['class'] == 'C', true_col] = ''
            else:
                out_df.loc[out_df['class'] == 'C', true_col] = out_df.loc[out_df['class'] == 'C', three_col]
                out_df = out_df.drop(labels=[three_col], axis=1)
            out_df = out_df.drop(labels=[col], axis=1)

    return out_df


if __name__ == '__main__':
    angle_threshold = 0.1
    if 'interact' in argv[1] or 'ind_counts' in argv[1]:
        angle_threshold = 0.001
    classify(pd.read_csv(argv[1]), angle_threshold).to_csv(argv[1].replace('pa_specificity_', 'classified_'))
